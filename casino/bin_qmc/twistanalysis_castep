#!/bin/bash
##############################################################################
#                                                                            #  
# Twistanalysis_castep                                                       #
#                                                                            #
# Script for analysing the results generated by twistav_castep.              #
# Extrapolates the DMC energy to zero time step at each twist.               #
# Adds in a DFT correction for residual finite-twist errors.                 #
# Requires DMC energies at one or more time steps in separate directories.   #
# Asks user for the DFT energy with fine k-point sampling.                   #
# Asks user about units and additional discard of equilibration data.        #
# The final energy and error bar can be found in twistanalysis.results.      # 
#                                                                            #
# EM/NDD, 21/01/2014.                                                        #
#                                                                            #
##############################################################################

# Colours.
default="\033[0m" ; black="\033[30m" ; red="\033[31m"
green="\033[32m"  ; brown="\033[33m" ; blue="\033[34m"
purple="\033[35m" ; cyan="\033[36m"  ; grey="\033[37m"

dmcext="E_v_dtdmc.dat" # File holding DMC energy v. time step for each twist.
twist_data="E_v_twist.dat" # File holding DMC energy at zero time step against
                           # twist number.
result="twistanalysis.results" # File holding the final twist-averged energy.


function DMC_analyse_time_step {
################################################################################
# Generate reblock.results file for a given time step.                         #
# Reports DMC energy and error bar.                                            #
# This function should be called with one argument which is:                   #
# A directory in directory $twistdir with the CASINO input/output files.       #
################################################################################
 local discard blength warning energy_err time_step x bd
 if [ ! -d "$1" ]; then
  echo -e "${red}Error reading $twistdir/$1.$default"
  exit 1
 fi # No file at first time-step
 bd=$(pwd)
 cd "$1"
 if [ ! -f dmc.hist ]; then
  echo -e "${red}dmc.hist is missing in $twistdir/$1 directory.$default"
  exit 2
 fi # No dmc.hist
# Ask user about extra discard in the main part.
# The additional discard is stored in variable nskip.
 discard=$(awk "BEGIN{c=-1 ; p=\"\"} (c>=0){if(NF>3){c=c+1} \
  if(/START STATS/){p=c}} /# Raw QMC data/{c=$nskip} END{print p}" dmc.hist)
 blength=0
 for x in out* dmc.status ; do
  if [ -f "$x" ]; then
   blength=$(awk 'BEGIN{b=0}
    /Mixed estimators of the energies at the end of the run/{b=0}
    /*** BEST ***/{b=$1} END{print b}' "$x")
  fi
 done # x
 if [ $blength -eq 0 ]; then
  echo -e "${red}Error: cannot determine optimal block length in \
$twistdir/$1.$default"
  exit 3
 fi
 if [ -z "$discard" ]; then
  echo -e "${red}Error: cannot find statistics-accumulation data in \
$twistdir/$1/dmc.hist.$default"
  exit 4
 fi # no START STATS.
 if [ -z "$blength" ]; then
  echo -e "${red}Error: cannot find data in $twistdir/$1/dmc.status.$default" 
  exit 5
 fi # no STATUS.
 if [ -f reblock.results ]; then
  rm -f reblock.results
 fi # rm reblock.results
 if [ -f reblock.plot ]; then
  rm -f reblock.plot
 fi # rm reblock.plot
 echo -e "$discard\n$unit\n$blength" | reblock > reblock.results
 if [ $(grep -c "Total energy" reblock.results) -eq 0 ]; then
  echo -e "${red}Error: problem running reblock in $twistdir/$1.$default"
  exit 6
 fi # No "Total energy"
 if [ $(grep -c "Total energy" reblock.results) -ne 1 ]; then
  echo -e \
   "${red} Please check the number of total energies in the \
$twistdir/$1/reblock.results file. At the moment it works just with one total \
energy for either MPC or Ewald.$default"
  exit 7
 fi # number of total energy
 energy_err=$(awk '/Total energy \(using Ewald\) :|Total energy \(using MPC\) :/\
  {printf "%.15g  %.15g\n",$6,$7}' reblock.results | tail -1) 
# Read input to get time-step value.
 if [ ! -f input ] || [ -z "$(grep 'dtdmc' input)" ]; then
  echo -e \
   "${red}Missing input file in $twistdir/$1 or time step not defined in \
it.${default}"
  exit 8
 fi # No input or no dtdmc
 time_step=$(awk 'BEGIN{IGNORECASE=1} /^ *dtdmc /{printf "%.15g\n",$3}' input \
  | tail -1)
 echo -e "$time_step $energy_err" >> $bd/$dmcext
 warning=$(awk '/WARNING:/' reblock.results)
 if [ -n "$warning" ]; then
  echo -e "${blue}Please check $twistdir/$1. The following warning is present \
in reblock.results:$default"
  echo -e "$warning"
  echo
 fi # warning in reblock.results
 cd $bd
}


function extrapolate_zero_time_step {
###########################################################################
# Extrapolate DMC energy to zero time-step.  The energy and error bar are #
# stored in variable E_err_zt.                                            #
###########################################################################
 local ndata
 if [ ! -f $dmcext ]; then
  echo -e "${red}$dmcext file is missing.$default"
  exit 9
 fi # No $dmcext
 ndata=$(grep -c "." $dmcext)
 if [ $ndata -gt 1 ]; then
  echo -e "$dmcext\n2\n0\n1" | extrapolate_tau > temp_$$
  if [ -z "$(grep 'k_1   =' temp_$$)" ]; then
   echo -e \
    "${red}Error in reading $twistdir/$dmcext file and extrapolation to zero\
 time step.$default"
   exit 10
  fi # Problem with extrapolate_tau
  E_err_zt=$(awk '/k_1   = /{printf "%.15g  %.15g\n",$3,$5}' temp_$$ | tail -1)
  rm -f temp_$$
 elif [ $ndata -eq 1 ]; then
  E_err_zt=$(awk '/./{print $2" "$3}' $dmcext)
 else
  echo -e "${red}Error counting data in $dmcext.$default"
  exit 11
 fi
}


function DFT_difference { 
####################################################################
# Reports the difference between:                                  #
# DFT energy of k-point grid corresponding to the supercell and    #
# DFT energy of a fine k-point mesh.                               #
####################################################################
 local E_tdft gzipped dft_unit
 if [ $(ls -1 *.castep{,.gz} 2> /dev/null | wc -l) -ne 1 ]; then
  echo -e "${red}Error: was expecting to find just one .castep file in \
$twistdir.$default"
  exit 11
 fi # Number of .castep.gz
 if [ -f *.castep.gz ]; then
  gunzip *.castep.gz
  gzipped=1
 else
  gzipped=0
 fi # gunzip .castep.gz
 if [ $(grep -c "NB est" *.castep) -ne 1 ] && [ $(grep -c "Final energy =" \
  *.castep) -ne 1 ]; then
  echo -e "${red} Please check the total energy in the $twistdir/"*.castep" \
file.$default"
  exit 12
 fi # number of total energy
 dft_unit=$(awk '/output         energy unit                     :/{print $5}' \
  *.castep | tail -1)
 case "$dft_unit" in
 Ha)
  case $unit in
  1)
   E_tdft=$(awk '/NB est\. 0K\ energy \(E-0\.5TS)/{printf "%.15g\n",$7}
    /Final energy =/{printf "%.15g\n",$4}' *.castep | tail -1) ;;
  2)
   E_tdft=$(awk '/NB est\. 0K\ energy \(E-0\.5TS)/{printf "%.15g\n",\
    $7*27.211396132} /Final energy =/{printf "%.15g\n",$4*27.211396132}' \
    *.castep | tail -1) ;;
  3)
   E_tdft=$(awk '/NB est\. 0K\ energy \(E-0\.5TS)/{printf "%.15g\n",\
    $7*627.507541278} /Final energy =/{printf "%.15g\n",$4*627.507541278}' \
    *.castep | tail -1) ;;
  4)
   E_tdft=$(awk '/Total number of ions in cell =/{natoms=$8}
    /NB est\. 0K\ energy \(E-0\.5TS)/{printf "%.15g\n",$7/natoms}
    /Final energy =/{printf "%.15g\n",$4/natoms}' *.castep | tail -1) ;;
  5)
   E_tdft=$(awk '/Total number of ions in cell =/{natoms=$8}
    /NB est\. 0K\ energy \(E-0\.5TS)/{printf "%.15g\n",$7*27.211396132/natoms}
    /Final energy =/{printf "%.15g\n",$4*27.211396132/natoms}' *.castep \
    | tail -1) ;;
  6)
   E_tdft=$(awk '/Total number of ions in cell =/{natoms=$8}
    /NB est\. 0K\ energy \(E-0\.5TS)/{printf "%.15g\n",\
    $7*627.507541278/natoms} /Final energy =/{printf "%.15g\n",\
    $4*627.507541278/natoms}' *.castep | tail -1) ;;
   *)
   echo -e "${red}Error: units confusion.$default"
   exit 13 ;;
  esac # unit
  ;;
 eV)
  case $unit in
  1)
   E_tdft=$(awk '/NB est\. 0K\ energy \(E-0\.5TS)/{printf "%.15g\n",\
    $7/27.211396132}
    /Final energy =/{printf "%.15g\n",$4/27.211396132}' *.castep | tail -1) ;;
  2)
   E_tdft=$(awk '/NB est\. 0K\ energy \(E-0\.5TS)/{printf "%.15g\n",$7}
    /Final energy =/{printf "%.15g\n",$4}' \
    *.castep | tail -1) ;;
  3)
   E_tdft=$(awk '/NB est\. 0K\ energy \(E-0\.5TS)/{printf "%.15g\n",\
    $7*23.06046842411239}
    /Final energy =/{printf "%.15g\n",$4*23.06046842411239}' *.castep \
    | tail -1) ;;
  4)
   E_tdft=$(awk '/Total number of ions in cell =/{natoms=$8}
    /NB est\. 0K\ energy \(E-0\.5TS)/{printf "%.15g\n",$7/(27.211396132*natoms)}
    /Final energy =/{printf "%.15g\n",$4/(27.211396132*natoms)}' *.castep \
    | tail -1) ;;
  5)
   E_tdft=$(awk '/Total number of ions in cell =/{natoms=$8}
    /NB est\. 0K\ energy \(E-0\.5TS)/{printf "%.15g\n",$7/natoms}
    /Final energy =/{printf "%.15g\n",$4/natoms}' *.castep | tail -1) ;;
  6)
   E_tdft=$(awk '/Total number of ions in cell =/{natoms=$8}
    /NB est\. 0K\ energy \(E-0\.5TS)/{printf "%.15g\n",\
    $7*23.06046842411239/natoms} /Final energy =/{printf "%.15g\n",\
    $4*23.06046842411239/natoms}' *.castep | tail -1) ;;
   *)
   echo -e "${red}Error: units confusion.$default"
   exit 13 ;;
  esac # unit
  ;;
 *)
  echo -e "${red}Error: units in .castep file should be Ha or eV.$default"
  exit 14 ;;
 esac
 if [ $gzipped -eq 1 ]; then
  gzip *.castep
 fi # gzip .castep
 E_dft=$(awk "BEGIN{printf \"%.15g\\n\",($E_fdft)-($E_tdft)}")
}


#####################################################################
# Main program starts here                                          #
#####################################################################
echo
echo " TWISTANALYSIS"
echo " ============="
echo
if [ ! -d twist0001 ]; then
 echo -e "${red}Error: this script should be run in a directory containg \
twist0001 ...$default"
 exit 13
fi
echo "How many lines of statistics-accumulation data do you wish to discard?"
echo "(On top of the lines marked as equilibration.)"
read nskip
while [ $(echo "$nskip" | grep -cE "^[0-9]*?$") -ne 1 ]; do
 echo "Please try an integer number."
 read nskip
done # enter second discard 
echo
echo "Please select units for your energy data.  Choose one of:"
echo " (1) au per prim cell; (2) eV per prim cell; (3) kcal per prim cell."
echo " (4) au per atom; (5) eV per atom; (6) kcal per atom."
read unit
while [ $(echo "$unit" | grep -cE "^[1-6]$") -ne 1 ]; do
 echo "Please try with one of the above integer numbers."
 read unit
done # enter unit 
echo
echo "Please enter DFT energy with fine k point sampling."
echo "(Please use the units you have just selected above.)"
echo "E_DFT: "
read E_fdft
while [ $(echo "$E_fdft" \
 | grep -cE "^[-+]?[0-9]*\.?[0-9]+([eEdD][-+]?[0-9]+)?$") -ne 1 ]; do
 echo "Please try again with a real number."
 read E_fdft
done # enter real number 
echo  
if [ -f $twist_data ]; then
 rm -f $twist_data
fi # remove existed file
touch $twist_data
i=1
for twistdir in twist[0-9][0-9][0-9][0-9]; do 
 if [ ! -d $twistdir ]; then
  echo -e "${red} Cannot find any twistxxxx directories.$default"
  exit 14
 fi # no directory
 cd $twistdir
 echo -e "Working in directory $blue$twistdir$default ..."
 rm -f $dmcext 2> /dev/null
 touch $dmcext

# Extract the DMC energy at each time step.
 ndirs=0
 for dmcdir in . * ; do
  if [ -d $dmcdir ] && [ -f $dmcdir/input ] && [ -f $dmcdir/dmc.hist ]; then
   DMC_analyse_time_step $dmcdir
   ndirs=$((ndirs+1))
  elif [ -d $dmcdir ] && ( [ -f $dmcdir/input.gz ] \
   || [ -f $dmcdir/dmc.hist.gz ] ) ; then
   echo -e "${purple}Warning: have found gzipped input and dmc.hist \
files.$default"
  fi # Directory with DMC data.
 done # dmcdir
 if [ $ndirs -eq 0 ]; then
  echo -e "${red}Error: was expecting to find DMC data in $twistdir.$default"
  exit 15
 fi # Fewer than two DMC directories.

# Extrapolate the DMC energies to zero time step.  Store the result in E_err_zt.
 extrapolate_zero_time_step
 
# Evaluate the DFT correction (DFT with fine k-point mesh minus DFT at each
# twist).  Store the result in E_dft.
 DFT_difference

# Reports all twisted energies and errors  
 echo -e "$i $E_err_zt $E_dft" >> ../$twist_data
 cd ..
 i=$(($i+1))
done # twistdir

# Using least-squares fitting program to extrapolate energy to infinite number
# of twists.
tahelper > $result
echo "Done.  Results placed in $result."
echo

exit 0
