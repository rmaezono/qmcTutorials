#!/bin/bash
#--------------------------------------------------------------#
# Given the current CASINO_ARCH ($1 overrides), create wrapper #
# scripts for each of the entries in ./utils/$CASINO_ARCH and  #
# put them in the current directory (which should be           #
# CASINO/bin_qmc). These wrapper scripts will select the       #
# required binary to run according to the runtime value of     #
# CASINO_ARCH. Links will be directly linked rather than       #
# wrapped, except links to dummy_script which will be          #
# wrapped.                                                     #
#                                                              #
# PLR 08.2007                                                  #
#--------------------------------------------------------------#
set +u

# Convert old QMC_ARCH+QMC_ID into CASINO_ARCH
if [ -z "$CASINO_ARCH" ] ; then
 if [ ! -z "$QMC_ARCH" ] ; then
  [ -z "$QMC_ID" ] && export CASINO_ARCH=$QMC_ARCH\
   || export CASINO_ARCH=$QMC_ARCH.$QMC_ID
 fi
fi

###################### Functions ######################
function next_field {
 local str="$1"
 while (($#>2)) ; do shift
  [[ "$1" == "$str" ]] && { echo "$2" ; return ; }
 done
}

function readlink_custom {
 type -P readlink >& /dev/null && readlink "$1"\
  || next_field "->" $(/bin/ls -l "$1" 2>/dev/null)
}

function chase_link {
 local file="$1" dir linkto linkdir
 while [[ "$file" == */ ]] ; do file=${file%/} ; done
 dir=${file%/*}/ ; dir=$(cd "$dir" ; pwd) ; [[ "$dir" != */ ]] && dir="$dir/"
 file=$dir${file##*/}
 while : ; do
  [ ! -L "$file" ] && { echo "$file" ; return ; }
  linkto=$(readlink_custom "$file") ; linkdir=${linkto%/*}/
  dir=$(cd "$dir" ; cd "$linkdir" ; pwd) ; [[ "$dir" != */ ]] && dir="$dir/"
  file="$dir${linkto##*/}"
 done
}
#################### End functions ####################

# Read command line
ENVIRONMENT_COMMAND=""
while (($#>0)) ; do
 case "$1" in
 --environment-command=*) ENVIRONMENT_COMMAND="${1#*=}" ;;
 --arch=*) CASINO_ARCH="${1#*=}" ;;
 *)
  echo "Usage: ${0##*/} [--arch=<arch>] [--environment-command=<command>]"
  echo "Argument '$1' not recognized."
  exit 1 ;;
 esac
 shift
done
# Setup
[ -z "$CASINO_ARCH" ] && { echo "CASINO_ARCH undefined." ; exit 1 ; }
[ -z "$ENVIRONMENT_COMMAND" ] && ENVIRONMENT_COMMAND=:
curdir=$(pwd) ; bindir=utils/$CASINO_ARCH ; pardir=$(cd .. ; pwd)
timetag=$(date +"%H:%M:%S, %d/%b/%Y") ; hostname=$(hostname)
[ ! -d "$bindir" ] && { echo "Directory \"$bindir\" does not exist."; exit 1 ;}

# Loop over files in directory
for file in $(find "$bindir") ; do
 [ -f "$file" ] && [ ! -x "$file" ] && continue # skip non-executable files
 [ ! -e "$file" ] && continue # skip broken links
 filename=${file##*/}
 [[ "$file" != "$bindir/$filename" ]] && continue # skip naming errors
 [ -e "./$filename" ] || [ -L "./$filename" ]\
  && rm -f "./$filename" >& /dev/null # overwrite wrappers
 if [ -L "$file" ] ; then
  # Deal with links
  wherelink=$(readlink_custom $file)
  if [[ "$wherelink" != *dummy_script ]] ; then
   # Use absolute path
   dirlink=${wherelink%/*} ; dirlink=$(cd $bindir ; cd $dirlink ; pwd)
   wherelink=${wherelink##*/}
   [ ! -e "$dirlink/$wherelink" ] && continue # skip broken links
   ln -s $dirlink/$wherelink ./$filename
   continue
  fi
 fi
 # File not a link, or is a link to dummy_script
 [[ "$CASINO_ARCH" == windowspc-* ]] && filename=${filename%.exe}
 touch ./$filename
 cat >> ./$filename <<_EOS
#!/bin/bash
# Automatically-generated wrapper for '$filename' utility.
# Generation info:
# - when    : $timetag
# - where   : $hostname
# - CASINO_ARCH: $CASINO_ARCH
# - ENVIRONMENT_COMMAND: $ENVIRONMENT_COMMAND

# Chaselink functions
function next_field {
 local str="\$1"
 while ((\$#>2)) ; do shift
  [[ "\$1" == "\$str" ]] && { echo "\$2" ; return ; }
 done
}

function readlink_custom {
 type -P readlink >& /dev/null && readlink "\$1"\
  || next_field "->" \$(/bin/ls -l "\$1" 2>/dev/null)
}

function chase_link {
 # Find the physical file corresponding to \$1, possibly
 # by following a chain of soft links
 local file="\$1" dir linkto linkdir
 while [[ "\$file" == */ ]] ; do file=\${file%/} ; done
 dir=\${file%/*}/ ; dir=\$(cd "\$dir" ; pwd) ; [[ "\$dir" != */ ]]\
  && dir="\$dir/"
 file=\$dir\${file##*/}
 while : ; do
  [ ! -L "\$file" ] && { echo "\$file" ; return ; }
  linkto=\$(readlink_custom "\$file") ; linkdir=\${linkto%/*}/
  dir=\$(cd "\$dir" ; cd "\$linkdir" ; pwd) ; [[ "\$dir" != */ ]]\
   && dir="\$dir/"
  file="\$dir\${linkto##*/}"
 done
}
# End of chaselink functions

# Convert old QMC_ARCH+QMC_ID into CASINO_ARCH
if [ -z "\$CASINO_ARCH" ] ; then
 if [ ! -z "\$QMC_ARCH" ] ; then
  [ -z "\$QMC_ID" ] && export CASINO_ARCH=\$QMC_ARCH\
   || export CASINO_ARCH=\$QMC_ARCH.\$QMC_ID
 fi
fi
# Check CASINO_ARCH is set.
[ -z "\$CASINO_ARCH" ] && { echo "CASINO_ARCH unset." ; exit 1 ; }
# Get expected path/name of binary from path/name of this script
actual0=\$(chase_link \$0)
fname=\${actual0##*/}
fpath0="\${actual0%/*}"
fpath="\$(cd "\$fpath0" ; pwd)/utils/\$CASINO_ARCH"
# Get expected arch path
farchpath="\$(cd "\$fpath0/.." ; pwd)/arch"
# "Remembered" path/name of binary
rpath="$curdir/utils/\$CASINO_ARCH"
rname="$filename"
# "Remembered" arch path
rarchpath="$pardir/arch"
# "Remembered" environment command
renvcmd='$ENVIRONMENT_COMMAND'
# Check binary path exists
if [ ! -d "\$fpath" ] && [ ! -d "\$rpath" ] ; then
 echo "Wrapper failed to find bindir for CASINO_ARCH=\$CASINO_ARCH ."
 echo "Try typing 'make' under CASINO/utils ." ; exit 1
fi
# Locate arch directory
archpath="\$farchpath"
[ -e "\$archpath/taglib.sh" ] && [ -e "\$archpath/data/\$CASINO_ARCH.arch" ]\
 || archpath="\$rarchpath"
[ -e "\$archpath/taglib.sh" ] && [ -e "\$archpath/data/\$CASINO_ARCH.arch" ]\
 || archpath=""
# Search for binary (most likely: this script's path with remembered filename)
for bin in "\$fpath/\$rname" "\$fpath/\$fname" "\$rpath/\$rname" \
 "\$rpath/\$fname" ; do
 [ -e "\$bin" ] && [ -x "\$bin" ] && break || bin=""
done
# Check whether binary was found
if [ -z "\$bin" ] ; then
 echo "Wrapper failed to find \$fname for CASINO_ARCH=\$CASINO_ARCH ."
 echo "Try typing 'make' under CASINO/utils ." ; exit 1
fi
# Set environment
if [ -z "\$archpath" ] || [ ! -e "\$archpath/data/\$CASINO_ARCH.arch" ] ; then
 envcmd="\$renvcmd"
else
 source "\$archpath/taglib.sh"
 quickload_tags_make UTILS_MODE "\$archpath/data/\$CASINO_ARCH.arch"
 if [ "\$UTILS_MODE" = native ] ; then
  quickload_tags_make ENVIRONMENT_COMMAND_NATIVE\
   "\$archpath/data/\$CASINO_ARCH.arch"
  envcmd="\$ENVIRONMENT_COMMAND_NATIVE"
 else
  quickload_tags_make ENVIRONMENT_COMMAND "\$archpath/data/\$CASINO_ARCH.arch"
  envcmd="\$ENVIRONMENT_COMMAND"
 fi
fi
eval "\$envcmd"
# Run binary
\$bin "\$@"
_EOS
 chmod +x "./$filename"
done
