PWSCF --> CASINO
================

MDT 3.2011

PWSCF supports the Cambridge quantum Monte Carlo program CASINO directly
(properly so only from version 4.3). CASINO may take the output of PWSCF and
'improve it' giving considerably more accurate total energies and other
quantities than DFT is capable of.

PWSCF  http://www.quantum-espresso.org
CASINO http://vallico.net/casinoqmc/

PWSCF users wishing to learn how to use CASINO may like to attend one
of the annual CASINO summer schools in Mike Towler's "Apuan Alps Centre
for Physics" in Tuscany, Italy.

TTI    http://vallico.net/tti/tti.html

Running PWSCF
=============

This directory contains a run script 'runpwscf' which may be used to run the
PWSCF program on all the architectures that CASINO supports (it uses the
same architecture information in CASINO/arch). It understands more or less
the same set of command line flags as 'runqmc' - one important addition
being the '--qmc/-w' option which toggles the creation of CASINO wavefunction
files.

Practicalities
==============

The interface between PWSCF and CASINO is provided through a file with a
standard format containing geometry, basis set, and orbital coefficients, which
PWSCF will produce on demand. For SCF calculations, the name of this file may
be pwfn.data, bwfn.data or bwfn.data.b1 depending on user requests (see below).
If the files are produced from an MD run, the files have a suffix .1, .2,
.3 etc. corresponding to the sequence of timesteps.

CASINO support is implemented by three routines in the PW directory of the
espresso distribution:

* pw2casino.f90 : the main routine
* pw2casino_write.f90 : writes the CASINO xwfn.data file in various formats
* pw2blip.f90 : does the plane-wave to blip conversion, if requested

Relevant behaviour of PWSCF may be modified through an optional auxiliary input
file, named pw2casino.dat (see below).

[In some versions prior to 4.3, this functionality was provided through
separate post-processing utilities available in the PP directory: these are
no longer supported. For QMC-MD runs, PWSCF etc previously needed to be
'patched' using the patch script PP/pw2casino-MDloop.sh - this is no longer
necessary.]

How to generate xwfn.data files with PWSCF
==========================================

Use the '-pw2casino' option when invoking pw.x, e.g.:

pw.x -pw2casino < input_file > output_file

The xfwn.data file will then be generated automatically.

If running using the supplied 'runpwscf' script, then one would type
(with assumed in.pwscf and out.pwscf i/o files):

runpwscf --qmc       OR      runpwscf -w

On parallel machines, one could type e.g.

runpwscf --qmc -p 128

to run the calculation on 128 cores, or whatever..

PWSCF is capable of doing the plane wave --> blip conversion directly (the
'blip' utility provided in the CASINO distribution is not required) and so by
default, PWSCF produces the 'binary blip wave function' file bwfn.data.b1

Various options may be modified by providing a file 'pw2casino.dat'
with the following format:

&inputpp
blip_convert=.true.
blip_binary=.true.
blip_single_prec=.false.
blip_multiplicity=1.d0
n_points_for_test=0
/

Some or all of the 5 keywords may be provided, in any order. The default
values are as given above (and these are used if the pw2casino.dat file is
not present.

The meanings of the keywords are as follows:

blip_convert
------------

Reexpand the converged plane-wave orbitals in localized blip
functions prior to writing the CASINO wave function file. This is almost
always done, since wave functions expanded in blips are considerably more
efficient in quantum Monte Carlo calculations. If blip_convert=.false.
a pwfn.data file is produced (orbitals expanded in plane waves); if
blip_convert=.true., either a bwfn.data file or a bwfn.data.b1 file is
produced, depending on the value of 'blip_binary' (see below).

blip_binary
-----------
If true, and if blip_convert is also true, write the blip wave function
as an unformatted binary bwfn.data.b1 file. This is much smaller than
the formatted bwfn.data file, but is not generally portable across
all machines.

blip_single_prec
----------------

If .false. the orbital coefficients in bwfn.data(.b1) are written out in double
precision; if the user runs into hardware limits blip_single_prec can be
set to .true. in which case the coefficients are written in single
precision, reducing the memory and disk requirements at the cost of a small
amount of accuracy..

blip_multiplicity
-----------------
The quality of the blip expansion (i.e., the fineness of the blip grid) can be
improved by increasing the grid multiplicity parameter given by this keyword.
Increasing the grid multiplicity results in a greater number of blip
coefficients and therefore larger memory requirements and file size, but the
CPU time should be unchanged. For very accurate work, one may want to
experiment with grid multiplicity larger that 1.0. Note, however, that it
might be more efficient to keep the grid multiplicity to 1.0 and increase the
plane wave cutoff instead.

n_points_for_test
-----------------

If this is set to a positive integer greater than zero, PWSCF will sample
the wave function, the Laplacian and the gradient at a large number of
random points in the simulation cell and compute the overlap of the
blip orbitals with the original plane-wave orbitals:

alpha =        <BW|PW>
        ---------------------
         sqrt{<BW|BW><PW|PW>}

The closer alpha is to 1, the better the blip representation.  By increasing
blip_multiplicity, or by increasing the plane-wave cutoff, one ought to be
able to make alpha as close to 1 as desired. The number of random points used
is given by n_points_for_test.


Pseudopotentials in PWSCF and CASINO
====================================

DFT trial wave functions produced by PWSCF must be generated using the
same pseudopotential as in the subsequent QMC calculation. This requires the
use of tools to switch between the different file formats used by the two
codes.

CASINO uses the 'CASINO tabulated format', PWSCF officially supports the UPF
(version 2) format (though it will read other `deprecated' formats).

It should be noted that ultrasoft and PAW pseudopotentials cannot be used
with the CASINO code.

There are two options for switching between the various file formats:

(1) casino2upf/upf2casino (written by Simon Binnie)

Converts CASINO tabulated format to and from UPF version 2 (UPFv2) format.

This is included in the Quantum Espresso distribution (see directory
'upftools'.

In the CASINO distribution, see in addition the README and INSTRUCTIONS files
in the utils/pseudo_converters/pwscf/casino2upf directory.

Note the following pitfall. The casino2upf utility marks any UPF files it
creates as having been generated using Hartree--Fock (since they generally
are).  If you do not supply a value for the 'input_dft' keyword in the SYSTEM
section of the PWSCF input file, then PWSCF will attempt to use the functional
specified in the pseudopotential file, i.e., it will try to do a Hartree--Fock
calculation, and - given that this is only possible with PWSCF if you compiled
it having invoked 'configure' with the '--enable-exx' flag - then the code may
stop and whine about not having been compiled with support for hybrid
functionals. This can be confusing. Solution: specify input_dft in the input
file.

(2) casino2gon (written by John Trail)

Converts CASINO tabulated format to the (deprecated) GON format.

This is included in the utils/pseudo\_converters/pwscf/casino2gon
directory in the CASINO distribution.

Which utility to use?

Since UPFv2 is the current official format for PWSCF, one would normally use
the casino2upf converter (though as of 3.2011 PWSCF will still read .gon
files).

The casino2gon alternative is useful when you need to do interpolation,
i.e., use a non-standard grid or wave functions on a different grid.
In particular it can take pp_gaussian or pp_gamess as input as
well as pp.data (see the CASINO pseudopotential website).

Erroneous versions
==================

Do not use unmodified versions 5.1 or 5.1.1 of the PWSCF DFT code (extant from
April --> December 2014) to generate QMC trial wave functions as they contained
a bug introduced by the developers that affected the CASINO converter routine.
SVN development versions from December 2014 contain a fix for this bug, as will
subsequent releases.

To fix the bug manually, then replace line 366 of PW/src/pw2casino_write.f90

    CALL get_buffer (evc, nwordwfc, iunwfc, ikk )

with

    IF( nks > 1 ) CALL get_buffer (evc, nwordwfc, iunwfc, ikk )

MDT 1.2015

