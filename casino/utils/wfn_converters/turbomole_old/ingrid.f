      SUBROUTINE ingrid(su,rthr,buff,frocc,valmax,dinx,n_prim,nbuff,
     &                  iatmao,norb,nbfact,eig,neig,wfn)
      IMPLICIT REAL*8 (a-h,o-z)

      INCLUDE 'param.h'
      INCLUDE 'lquant.h'

      COMMON/qmc/el
      COMMON/infoa/xyz(3,ndi10),charge(ndi10),wmass(ndi10),natoms
      COMMON/pseud/nelecp(ndi10),ipseud
      COMMON/nshel/expnt(ndi13),contr(ndi13),katom(ndi9),ktype(ndi9),
     & kprim(ndi9),kbfn(ndi9),kmin(ndi9),kmax(ndi9),nprims(ndi9),
     & ndegen(ndi9),nshell,nbf
      DIMENSION su(norb*nbfact),frocc(norb),valmax(nbfact),dinx(nbfact)
      DIMENSION eig(neig)

      CHARACTER*(*)wfn
      DIMENSION icode(ndi9),iseq(ndi10)
      DIMENSION z(ndi13),c(ndi13),hff(7),hfd(5)

      DATA pi/3.14159265358979d0/

      if(neig/=norb)stop'sorry, norb/=neig (non-abelian group?)'
      if(nbf/=nbfact)stop'sorry, nbf/=nbfact'

c These factors have been taken from part of the CASINO code
      oneover_rt3=1.d0/sqrt(3.d0)
      oneover_rt5=1.d0/sqrt(5.d0)
      oneover_pi_cubed=1./pi**3.d0

      tv1=(8.d0*oneover_pi_cubed)**0.25d0   ! (2^3 / pi^3)**.25
      tv2=2.d0*tv1                          ! (2^7 / pi^3)**.25
      tv3=2.d0*tv2                          ! (2^11 / pi^3)**.25
      tv4=(512.d0*oneover_pi_cubed)**0.25d0

      hfd(1)=oneover_rt3
      hfd(2)=2
      hfd(3)=2
      hfd(4)=1
      hfd(5)=2

      hff(1)=sqrt(8.d0/15.d0)      ! m =  0
      hff(2)=2.d0*oneover_rt5/3.d0 ! m =  1
      hff(3)=hff(2)                ! m = -1
      hff(4)=sqrt(2.d0)/15.d0      ! m =  2
      hff(5)=(2.d0**1.5d0)/30.d0   ! m = -2
      hff(6)=oneover_rt3/15.d0     ! m =  3
      hff(7)=hff(6)                ! m = -3

      write(*,*)'output file: ',wfn
      io=66
      open(unit=io,file=wfn)
      write(io,*)
      write(io,*)
      write(io,'(''BASIC_INFO'')')
      write(io,'(''----------'')')
      write(io,'(''Generated by:'')')
      write(io,'(''TURBOMOLE 5.3'')')
      write(io,'(''Method:'')')
      write(io,'(''RHF'')')
      write(io,'(''DFT Functional:'')')
      write(io,'('' '')')
      write(io,'(''Periodicity:'')')
      write(io,'(''0'')')
      write(io,'(''Spin unrestricted:'')')
      write(io,'(''.false.'')')
      write(io,'(''nuclear-nuclear repulsion energy (au/atom):'')')

      fatoms=float(natoms)
      enuc=0
      do i=1,natoms
       do j=1,i-1
        r=sqrt((xyz(1,i)-xyz(1,j))**2+(xyz(2,i)-xyz(2,j))**2+
     &   (xyz(3,i)-xyz(3,j))**2)
        enuc=enuc+charge(i)*charge(j)/r
       enddo
      enddo
      write(io,'(E24.16)')enuc/fatoms

      write(io,'(''Number of electrons per primitive cell:'')')
      write(io,'(i12)')idint(el)

      write(io,*)
      write(io,'(''GEOMETRY'')')
      write(io,'(''--------'')')
      write(io,'(''Number of atoms:'')')
      write(io,'(i12)')natoms
      write(io,'(''Atomic positions (au):'')')
      do i=1,natoms
       write(io,'(3E20.13)')xyz(1,i),xyz(2,i),xyz(3,i)
      enddo
      write(io,'(''Atomic numbers for each atom:'')')
      write(io,'(8i10)')(nelecp(i)+idint(charge(i)),i=1,natoms)
      write(io,'(''Valence charges for each atom:'')')
      write(io,'(4E20.13)')(charge(i),i=1,natoms)
      write(io,*)
      write(io,'(''BASIS SET'')')
      write(io,'(''---------'')')
      write(io,'(''Number of Gaussian centres'')')
      write(io,'(i12)')natoms
      write(io,'(''Number of shells per primitive cell'')')
      write(io,'(i12)')nshell
      write(io,
     & '(''Number of basis functions (AO) per primitive cell'')')
      write(io,'(i12)')nbf

      lmax=0
      npr=0
      do i=1,natoms
       iseq(i)=9999
      enddo
      do i=1,nshell
       iat=katom(i)
       iseq(iat)=min(i,iseq(iat))
       lmax=max(ktype(i),lmax)
       icode(i)=ktype(i)
       if(ktype(i)>1)icode(i)=ktype(i)+1
       ipt=kprim(i)-1
       ff=1.d0
       if(ktype(i)==3)ff=0.5
       if(ktype(i)==4)ff=1./2.8284271247462
       do j=1,nprims(i)
        npr=npr+1
        ipt=ipt+1
        c(npr)=contr(ipt)*ff
        z(npr)=expnt(ipt)

c The following lines of code convert the TM contr.coeffs.
c to exactly those in the Test.Fchk Gaussian output
c thus, because the casino utility multiplies by anorm,
c TMs data are OK
c       if(ktype(i)==1)then
c        anorm=tv1*(expnt(ipt)**0.75d0)
c        write(*,*)'s',expnt(ipt),c(npr)/anorm
c       endif
c       if(ktype(i)==2)then
c        anorm=tv2*(expnt(ipt)**1.25d0)
c        write(*,*)'p',expnt(ipt),c(npr)/anorm
c       endif
c       if(ktype(i)==3)then
c        anorm=tv2*(expnt(ipt)**1.75d0)
c        write(*,*)'d',expnt(ipt),c(npr)/anorm
c       endif
c       if(ktype(i)==4)then
c        anorm=tv4*(expnt(ipt)**2.25d0)
c        write(*,*)'f',expnt(ipt),c(npr)/anorm
c       endif

       enddo
      enddo

      if(lmax>4)stop'Only spdf-basis allowed!'
      write(io,'(''Number of Gaussian primitives per primitive cell'')')
      write(io,'(i12)')npr
      write(io,
     & '(''Highest shell angular momentum (s/p/d/f... 1/2/3/4...)'')')
      write(io,'(i12)')lmax
      write(io,
     & '(''Code for shell types (s/sp/p/d/f... 1/2/3/4/5...)'')')
      write(io,'(8i10)')(icode(i),i=1,nshell)
      write(io,'(''Number of Gaussian primitives in each shell'')')
      write(io,'(8i10)')(nprims(i),i=1,nshell)
      write(io,'(''Sequence number of first shell on each centre'')')
      write(io,'(8i10)')(iseq(i),i=1,natoms),nshell+1
      write(io,'(''Exponents of Gaussian primitives'')')
      write(io,'(4E20.13)')(z(i),i=1,npr)
      write(io,'(''Normalised contraction coefficients'')')
      write(io,'(4E20.13)')(c(i),i=1,npr)
      write(io,'(''Position of each shell (au)'')')

      do i=1,nshell
       j=katom(i)
       write(io,'(3E20.13)')xyz(1,j),xyz(2,j),xyz(3,j)
      enddo

! Sort MOs
      do 140 iii=2,norb
       i=iii-1
       k=i
       pp=eig(i)
       do 120 j=iii,norb
        if(eig(j)>=pp)goto120
        k=j
        pp=eig(j)
120    continue
       if(k==i)goto 140
       eig(k)=eig(i)
       eig(i)=pp
       hilf=frocc(i)
       frocc(i)=frocc(k)
       frocc(k)=hilf
       do ip=1,nbfact
        ii=ip+(i-1)*nbfact
        ik=ip+(k-1)*nbfact
        hilf=su(ii)
        su(ii)=su(ik)
        su(ik)=hilf
       enddo
140   continue

c     do i=1,norb
c      write(*,*)frocc(i),eig(i)
c     enddo

c Different order of d,f spherical harmonics
      do n=1,norb
       iao=0
       do is=1,nshell
        do j=1,2*ktype(is)-1
         iao=iao+1
         iad=iao+(n-1)*nbf
c d-shell
         if(ktype(is)==3)then
          if(j==4)then
           su4=su(iad)
           su5=su(iad+1)
           su(iad)=su5
           su(iad+1)=su4
          endif
         endif
c f-shell
         if(ktype(is)==4)then
          if(j==4)then
           su4      =su(iad)
           su5      =su(iad+1)
           su(iad)  =su5
           su(iad+1)=su4
          endif
          if(j==7)su(iad)=-su(iad)
         endif

        enddo
       enddo
      enddo

c Different norm of all d and f spherical harmonics in casino
      do n=1,norb
       iao=0
       do is=1,nshell
        do j=1,2*ktype(is)-1
         iao=iao+1
         iad=iao+(n-1)*nbf
         if(ktype(is)==3)su(iad)=su(iad)*hfd(j)
         if(ktype(is)==4)su(iad)=su(iad)*hff(j)
        enddo
       enddo
      enddo

      write(io,*)
      write(io,'(''MULTIDETERMINANT INFORMATION'')')
      write(io,'(''----------------------------'')')
      write(io,'(''GS'')')
      write(io,*)
      write(io,'(''EIGENVECTOR COEFFICIENTS'')')
      write(io,'(''------------------------'')')
      write(io,'(4E20.13)')(su(i),i=1,nbf*norb)
c     write(io,'(5E17.9 )')(su(i),i=1,nbf*norb)
      write(io,*)
      close(66)
      return
      END
